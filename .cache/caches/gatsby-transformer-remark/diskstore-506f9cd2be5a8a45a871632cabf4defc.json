{"expireTime":9007200819756410000,"key":"transformer-remark-markdown-html-403cdb842458fe146c43b1f78786ca43-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>こんにちわ、ななきです。</p>\n<p>だいぶ前にVueをTypeScript化した的な記事書いたのですが、それから案件でもTS化したVueを使っていたのと最近の界隈の流れもありNuxtもTypeScript化してみました。</p>\n<p>結果的にデコレータを使わずに、vuexもコンポーネントも型が効いており満足です。</p>\n<p>ちなみにvuex部分にかんしては<a href=\"https://github.com/takefumi-yoshii/ts-nuxtjs-express\" target=\"_blank\">こちら</a>のリポジトリを参考にさせて頂きました。</p>\n<h2>コンポーネントのTS化</h2>\n<p>コンポーネントに関してはびっくりするほどやることないです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add ts-node\n$ yarn add -D @nuxt/typescript\n$ touch tsconfig.json\n$ nuxt build</code></pre></div>\n<p>これだけです、あとはコンポーネント内で以下の様に書いて行けばいいだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from &#39;vue&#39;\n\nexport default Vue.extend({\n  // ここにいつものライフサイクル\n})\n&lt;/script&gt;</code></pre></div>\n<p>最初のうちはめんどくさいtsconfigすらもbuild時に記述してくれるのですごいです。</p>\n<p>そしてTS化すると気になるのがlintですよね。</p>\n<p>Nuxtのeslintは優秀なので可能な限りそのまま使いたいので以下の様に拡張します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add -D @typescript-eslint/eslint-plugin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  // ここまでデフォルトの設定\n\n  parserOptions: {\n    parser: &#39;@typescript-eslint/parser&#39;\n  },\n}</code></pre></div>\n<p>これでeslintでもTSをパースできる様になりました。</p>\n<p>とても簡単です。</p>\n<h2>vuexのTS化</h2>\n<p>こちらに関しては冒頭で紹介したリポジトリの<a href=\"https://github.com/takefumi-yoshii/ts-nuxtjs-express/tree/master/types/vuex\" target=\"_blank\">/types/vuex</a>を使わせてもらいました。</p>\n<p>その上でコンポーネント内でも型を効かせたいが、デコレーターは使いたくなかったので型のプラグインを作成しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"plugins/exstore/index.ts\"><pre class=\"language-plugins/exstore/index.ts\"><code class=\"language-plugins/exstore/index.ts\">import * as Vuex from &#39;vuex&#39;\n\nclass ExStore {\n  store: Vuex.ExStore\n  constructor(store) {\n    this.store = store\n  }\n\n  getStore() {\n    return this.store\n  }\n\n  state() {\n    return this.store.state\n  }\n\n  getters() {\n    return this.store.getters\n  }\n\n  commit() {\n    return this.store.commit\n  }\n\n  dispatch() {\n    return this.store.dispatch\n  }\n}\n\nexport default (context, inject) =&gt; {\n  const store = new ExStore(context.store)\n\n  inject(&#39;exStore&#39;, store.getStore())\n  inject(&#39;state&#39;, store.state())\n  inject(&#39;getters&#39;, store.getters())\n  inject(&#39;commit&#39;, store.commit())\n  inject(&#39;dispatch&#39;, store.dispatch())\n}</code></pre></div>\n<p>今度はこのプラグインを注入します。</p>\n<div class=\"gatsby-highlight\" data-language=\"nuxt.config.js\"><pre class=\"language-nuxt.config.js\"><code class=\"language-nuxt.config.js\">plugins: [\n  {\n    src: &#39;~/plugins/exStore&#39;,\n    ssr: true\n  }\n],</code></pre></div>\n<p>これでコンポーネント内で下記の様にstoreのオブジェクトへアクセスできるようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// store\nthis.$state.exStore\n\n// state\nthis.$state\n\n// getters\nthis.$getters[&#39;hoge/fuga&#39;]\n\n// commit\nthis.$commit[&#39;hoge/fuga&#39;]\n\n// dispatch\nthis.$dispatch[&#39;hoge/fuga&#39;]</code></pre></div>\n<p>なぜわざわざプラグインを作ったのは<code class=\"language-text\">$store</code>が<code class=\"language-text\">$store: Vuex.Store&lt;any&gt;</code>で固定されており書き換えが出来なかったためです。</p>\n<p>ので型定義ファイルに下記の追加をしていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"types/nuxt/vue.d.ts\"><pre class=\"language-types/nuxt/vue.d.ts\"><code class=\"language-types/nuxt/vue.d.ts\">import Vue from &#39;vue&#39;\nimport * as Vuex from &#39;vuex&#39;\n\ndeclare module &#39;vue/types/vue&#39; {\n  interface Vue {\n    $exStore: Vuex.ExStore\n    $state: Vuex.ExStore[&#39;state&#39;]\n    $getters: Vuex.ExStore[&#39;getters&#39;]\n    $commit: Vuex.ExStore[&#39;commit&#39;]\n    $dispatch: Vuex.ExStore[&#39;dispatch&#39;]\n  }\n}</code></pre></div>\n<p>こうすることでcontextを参照できる場所でのvuexの型が効くようになりました。</p>\n<h2>まとめ</h2>\n<p>コンポーネントだけであれば簡単にTS化できるので軽い気持ちで触ってみるのもいいと思います。</p>\n<p>ただvuexの型が効くとほんとに世界変わるので是非慣れてきたら使ってみてください。</p>"}